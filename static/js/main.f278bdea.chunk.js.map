{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["ChinaDns","doh","DohResolver","OtherDns","hostMap","Map","App","React","useState","result","setResult","setLoad","loadContent","forEach","cname","isWall","hosts","dns","query","then","response","ipAddr","answers","filter","ans","type","map","data","list","flatMap","host","ip","prevState","set","get","concat","useEffect","lines","Array","from","entries","Set","Fragment","CssBaseline","Button","onClick","color","filename","text","pom","document","createElement","setAttribute","encodeURIComponent","createEvent","event","initEvent","dispatchEvent","click","download","join","Paper","line","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f278bdea.chunk.js","sourcesContent":["import React from 'react';\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Paper from \"@material-ui/core/Paper\";\n// @ts-ignore\nimport doh from 'dohjs'\nimport Button from '@material-ui/core/Button';\n\ninterface answer {\n    name: string\n    type: string\n    ttl: number\n    class: string\n    flush: boolean\n    data: string\n}\n\nconst ChinaDns = [\n    new doh.DohResolver(\"https://doh.pub/dns-query\"),\n    new doh.DohResolver(\"https://dns.alidns.com/dns-query\")\n]\n\n// const CleanBrowsing = new doh.DohResolver(\"https://doh.cleanbrowsing.org/doh/security-filter/\")\n// const Comss = new doh.DohResolver(\"https://dns.east.comss.one/dns-query\")\n// const Snopyta = new doh.DohResolver(\"https://fi.doh.dns.snopyta.org/dns-query\")\n// const Twnic = new doh.DohResolver(\"https://dns.twnic.tw/dns-query\")\n/// const Oszx = new doh.DohResolver(\"https://dns.oszx.co/dns-query\")\n/// const DohSb = new doh.DohResolver(\"https://doh.dns.sb/dns-query\")\n// const DnsForge = new doh.DohResolver(\"https://dnsforge.de/dns-query\")\n\nconst OtherDns = [\n    new doh.DohResolver(\"https://dns.233py.com/dns-query\"),\n    new doh.DohResolver(\"https://dns.google/dns-query\"),\n    new doh.DohResolver(\"https://cloudflare-dns.com/dns-query\"),\n    new doh.DohResolver(\"https://1.0.0.1/dns-query\"),\n    new doh.DohResolver(\"https://doh-jp.blahdns.com/dns-query\"),\n    new doh.DohResolver(\"https://doh.eastas.pi-dns.com/dns-query\")\n]\n\nconst hostMap = new Map<string, [boolean, string[]]>([\n    [\"download.sangfor.com.cn\", [false, [\n        \"trial.dlsite.com\", \"img.dlsite.jp\", \"media.dlsite.com\", \"play.dl.dlsite.com\", \"media.ci-en.jp\",\n        \"media.stg.ci-en.jp\", \"file.chobit.cc\", \"img.chobit.cc\"\n    ]]],\n    [\"download.dlsite.com.wtxcdn.com\", [false, [\n        \"download.dlsite.com\"\n    ]]],\n    [\"j.sni.global.fastly.net\", [true, [\n        \"ssl.dlsite.com\", \"www.dlsite.com\", \"www.nijiyome.com\", \"www.nijiyome.jp\", \"download.dlsite.com\"\n    ]]],\n    [\"play.dlsite.com\", [true, [\n        \"play.dlsite.com\"\n    ]]],\n    [\"login.dlsite.com\", [true, [\n        \"login.dlsite.com\"\n    ]]]\n])\n\nconst download = (filename: string, text: string) => {\n    const pom = document.createElement('a');\n    pom.setAttribute('href', 'data:application/octet-stream,' + encodeURIComponent(text));\n    pom.setAttribute('download', filename);\n\n    if (document.createEvent) {\n        const event = document.createEvent('MouseEvents');\n        event.initEvent('click', true, true);\n        pom.dispatchEvent(event);\n    }\n    else {\n        pom.click();\n    }\n}\n\nconst App: React.FunctionComponent = () => {\n    const [result, setResult] = React.useState<Map<string, string[]>>(new Map())\n    const [load, setLoad] = React.useState<number>(0)\n    const loadContent = () => {\n        setResult(new Map())\n\n        hostMap.forEach(([isWall, hosts], cname) => {\n            (isWall ? OtherDns : ChinaDns).forEach((dns) => {\n                dns.query(cname, \"A\", \"GET\").then((response: { answers: answer[]; }) => {\n                    const ipAddr = response.answers.filter(ans => ans.type === \"A\").map(ans => ans.data)\n                    const list = hosts.flatMap(host => ipAddr.map(ip => `${ip} ${host} `))\n                    setResult(prevState => prevState.set(cname, (prevState.get(cname) || []).concat(list)))\n                    setLoad(prevState => prevState + 1)\n                })\n            })\n        })\n    }\n    const saveContent = () => {\n        const hosts = lines.join(\"\\n\");\n        const path = \"hosts\"\n        download(path, hosts);\n    }\n    React.useEffect(loadContent, [])\n    const lines = [\"# DLSite\"].concat(Array.from(result.entries()).flatMap(([cname, hosts]) => {\n        return [`## ${cname}`].concat(Array.from(new Set(hosts)))\n    }))\n    return (\n        <React.Fragment>\n            <CssBaseline />\n            <Button onClick={loadContent} color=\"primary\">刷新</Button>\n            <Button onClick={saveContent} color=\"primary\">下载</Button>\n            <h3>使用前请将已有的旧HOSTS清除，火狐加载可能存在问题，请尝试使用谷歌内核的浏览器访问。</h3>\n            <h3>请保存Hosts至路径覆盖原有文件 C:\\Windows\\System32\\drivers\\etc\\hosts （最好先备份）</h3>\n            <Paper>\n                {lines.map(line => (<li key={line}>{line}</li>))}\n            </Paper>\n        </React.Fragment>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
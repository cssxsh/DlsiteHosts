{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","React","useState","result","setResult","loadContent","DohPub","doh","DohResolver","Cloudflare","Map","forEach","value","key","query","then","response","ip_addr","answers","filter","ans","type","map","data","list","concat","ip","prevState","flatMap","host","useEffect","Fragment","CssBaseline","Button","onClick","Paper","line","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAwEeA,EAxDsB,WAAO,IAAD,EACXC,IAAMC,SAAmB,CAAC,aADf,mBAChCC,EADgC,KACxBC,EADwB,KAEjCC,EAAc,WAChBD,EAAU,CAAC,aACX,IAAME,EAAS,IAAIC,IAAIC,YAAY,6BAC7BC,EAAa,IAAIF,IAAIC,YAAY,wCAQvB,IAAIE,IAA+B,CAC/C,CAAC,0BAPU,CAAC,mBAAoB,gBAAiB,mBAAoB,qBAAsB,iBACzF,qBAAsB,mBAAoB,kBAAmB,iBAAkB,kBAOjF,CAAC,8BANU,CAAC,iBAAkB,iBAAkB,wBAOhD,CAAC,kBANU,mBAOX,CAAC,mBANU,sBASPC,SAAQ,SAACC,EAAOC,GACC,kBAAVD,EACPH,EAAWK,MAAMD,EAAK,KACjBE,MAAK,SAACC,GACH,IAAMC,EAAUD,EAASE,QACpBC,QAAO,SAAAC,GAAG,MAAiB,MAAbA,EAAIC,QAClBC,KAAI,SAAAF,GAAG,OAAIA,EAAIG,QACdC,EAAO,CAAC,KAAD,OAAMX,IAAOY,OAAOR,EAAQK,KAAI,SAAAI,GAAE,gBAAOA,EAAP,YAAad,EAAb,SAC/CR,GAAU,SAAAuB,GAAS,OAAIA,EAAUF,OAAOD,SAGhDlB,EAAOQ,MAAMD,EAAK,IAAK,OAClBE,MAAK,SAACC,GACH,IAAMC,EAAUD,EAASE,QACpBC,QAAO,SAAAC,GAAG,MAAiB,MAAbA,EAAIC,QAClBC,KAAI,SAAAF,GAAG,OAAIA,EAAIG,QACdC,EAAO,CAAC,KAAD,OAAMX,IAAOY,OAAOb,EAAMgB,SAAQ,SAAAC,GAAI,OAAIZ,EAAQK,KAAI,SAAAI,GAAE,gBAAOA,EAAP,YAAaG,EAAb,YACrEzB,GAAU,SAAAuB,GAAS,OAAIA,EAAUF,OAAOD,aAQ5D,OAFAvB,IAAM6B,UAAUzB,EAAa,IAGzB,kBAAC,IAAM0B,SAAP,KACI,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAQC,QAAS7B,GAAjB,QACA,kBAAC8B,EAAA,EAAD,KACKhC,EAAOmB,KAAI,SAAAc,GAAI,OAAK,wBAAIvB,IAAKuB,GAAOA,SCtDjCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f8bcf7c6.chunk.js","sourcesContent":["import React from 'react';\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Paper from \"@material-ui/core/Paper\";\n// @ts-ignore\nimport doh from 'dohjs'\nimport {Button} from '@material-ui/core';\n\ninterface answer {\n    name: string\n    type: string\n    ttl: number\n    class: string\n    flush: boolean\n    data: string\n}\n\nconst App: React.FunctionComponent = () => {\n    const [result, setResult] = React.useState<string[]>([\"# DLSITE\"])\n    const loadContent = () => {\n        setResult([\"# DLSITE\"])\n        const DohPub = new doh.DohResolver(\"https://doh.pub/dns-query\")\n        const Cloudflare = new doh.DohResolver(\"https://cloudflare-dns.com/dns-query\")\n\n        const host_1 = [\"trial.dlsite.com\", \"img.dlsite.jp\", \"media.dlsite.com\", \"play.dl.dlsite.com\", \"media.ci-en.jp\"\n            , \"media.stg.ci-en.jp\", \"www.nijiyome.com\", \"www.nijiyome.jp\", \"file.chobit.cc\", \"img.chobit.cc\"]\n        const host_2 = [\"www.dlsite.com\", \"ssl.dlsite.com\", \"download.dlsite.com\"]\n        const host_3 = \"play.dlsite.com\"\n        const host_4 = \"login.dlsite.com\"\n\n        const hostMap = new Map<string, string[] | string>([\n            [\"download.sangfor.com.cn\", host_1],\n            [\"w2.shared.global.fastly.net\", host_2],\n            [\"play.dlsite.com\", host_3],\n            [\"login.dlsite.com\", host_4]\n        ])\n\n        hostMap.forEach((value, key) => {\n            if (typeof value === \"string\") {\n                Cloudflare.query(key, \"A\")\n                    .then((response: { answers: answer[]; }) => {\n                        const ip_addr = response.answers\n                            .filter(ans => ans.type === \"A\")\n                            .map(ans => ans.data)\n                        const list = [`# ${key}`].concat(ip_addr.map(ip => `${ip} ${value} `))\n                        setResult(prevState => prevState.concat(list))\n                    })\n            } else {\n                DohPub.query(key, \"A\", \"GET\")\n                    .then((response: { answers: answer[]; }) => {\n                        const ip_addr = response.answers\n                            .filter(ans => ans.type === \"A\")\n                            .map(ans => ans.data)\n                        const list = [`# ${key}`].concat(value.flatMap(host => ip_addr.map(ip => `${ip} ${host} `)))\n                        setResult(prevState => prevState.concat(list))\n                    })\n            }\n        })\n    }\n\n    React.useEffect(loadContent, [])\n\n    return (\n        <React.Fragment>\n            <CssBaseline />\n            <Button onClick={loadContent}>LOAD</Button>\n            <Paper>\n                {result.map(line => (<li key={line}>{line}</li>))}\n            </Paper>\n        </React.Fragment>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}